/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppImport } from './routes/app'
import { Route as IndexImport } from './routes/index'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as AppMyImport } from './routes/app/my'
import { Route as AppCreateImport } from './routes/app/create'
import { Route as AppProposalProposalIdImport } from './routes/app/proposal/$proposalId'
import { Route as AppDominionDominionIdImport } from './routes/app/dominion/$dominionId'
import { Route as AppProposalProposalIdIndexImport } from './routes/app/proposal/$proposalId/index'
import { Route as AppDominionDominionIdIndexImport } from './routes/app/dominion/$dominionId/index'
import { Route as AppDominionDominionIdSettingsImport } from './routes/app/dominion/$dominionId/settings'
import { Route as AppDominionDominionIdProposalsImport } from './routes/app/dominion/$dominionId/proposals'
import { Route as AppDominionDominionIdParticipateImport } from './routes/app/dominion/$dominionId/participate'
import { Route as AppDominionDominionIdCreateProposalImport } from './routes/app/dominion/$dominionId/createProposal'

// Create/Update Routes

const AppRoute = AppImport.update({
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  path: '/',
  getParentRoute: () => AppRoute,
} as any)

const AppMyRoute = AppMyImport.update({
  path: '/my',
  getParentRoute: () => AppRoute,
} as any)

const AppCreateRoute = AppCreateImport.update({
  path: '/create',
  getParentRoute: () => AppRoute,
} as any)

const AppProposalProposalIdRoute = AppProposalProposalIdImport.update({
  path: '/proposal/$proposalId',
  getParentRoute: () => AppRoute,
} as any)

const AppDominionDominionIdRoute = AppDominionDominionIdImport.update({
  path: '/dominion/$dominionId',
  getParentRoute: () => AppRoute,
} as any)

const AppProposalProposalIdIndexRoute = AppProposalProposalIdIndexImport.update(
  {
    path: '/',
    getParentRoute: () => AppProposalProposalIdRoute,
  } as any,
)

const AppDominionDominionIdIndexRoute = AppDominionDominionIdIndexImport.update(
  {
    path: '/',
    getParentRoute: () => AppDominionDominionIdRoute,
  } as any,
)

const AppDominionDominionIdSettingsRoute =
  AppDominionDominionIdSettingsImport.update({
    path: '/settings',
    getParentRoute: () => AppDominionDominionIdRoute,
  } as any)

const AppDominionDominionIdProposalsRoute =
  AppDominionDominionIdProposalsImport.update({
    path: '/proposals',
    getParentRoute: () => AppDominionDominionIdRoute,
  } as any)

const AppDominionDominionIdParticipateRoute =
  AppDominionDominionIdParticipateImport.update({
    path: '/participate',
    getParentRoute: () => AppDominionDominionIdRoute,
  } as any)

const AppDominionDominionIdCreateProposalRoute =
  AppDominionDominionIdCreateProposalImport.update({
    path: '/createProposal',
    getParentRoute: () => AppDominionDominionIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/app/create': {
      preLoaderRoute: typeof AppCreateImport
      parentRoute: typeof AppImport
    }
    '/app/my': {
      preLoaderRoute: typeof AppMyImport
      parentRoute: typeof AppImport
    }
    '/app/': {
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppImport
    }
    '/app/dominion/$dominionId': {
      preLoaderRoute: typeof AppDominionDominionIdImport
      parentRoute: typeof AppImport
    }
    '/app/proposal/$proposalId': {
      preLoaderRoute: typeof AppProposalProposalIdImport
      parentRoute: typeof AppImport
    }
    '/app/dominion/$dominionId/createProposal': {
      preLoaderRoute: typeof AppDominionDominionIdCreateProposalImport
      parentRoute: typeof AppDominionDominionIdImport
    }
    '/app/dominion/$dominionId/participate': {
      preLoaderRoute: typeof AppDominionDominionIdParticipateImport
      parentRoute: typeof AppDominionDominionIdImport
    }
    '/app/dominion/$dominionId/proposals': {
      preLoaderRoute: typeof AppDominionDominionIdProposalsImport
      parentRoute: typeof AppDominionDominionIdImport
    }
    '/app/dominion/$dominionId/settings': {
      preLoaderRoute: typeof AppDominionDominionIdSettingsImport
      parentRoute: typeof AppDominionDominionIdImport
    }
    '/app/dominion/$dominionId/': {
      preLoaderRoute: typeof AppDominionDominionIdIndexImport
      parentRoute: typeof AppDominionDominionIdImport
    }
    '/app/proposal/$proposalId/': {
      preLoaderRoute: typeof AppProposalProposalIdIndexImport
      parentRoute: typeof AppProposalProposalIdImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  AppRoute.addChildren([
    AppCreateRoute,
    AppMyRoute,
    AppIndexRoute,
    AppDominionDominionIdRoute.addChildren([
      AppDominionDominionIdCreateProposalRoute,
      AppDominionDominionIdParticipateRoute,
      AppDominionDominionIdProposalsRoute,
      AppDominionDominionIdSettingsRoute,
      AppDominionDominionIdIndexRoute,
    ]),
    AppProposalProposalIdRoute.addChildren([AppProposalProposalIdIndexRoute]),
  ]),
])

/* prettier-ignore-end */
